{"version":3,"sources":["logo.svg","Home.js","About.js","Goals.js","serviceWorker.js","index.js"],"names":["module","exports","Home","useQuery","gql","loading","error","data","id","className","onClick","document","getElementById","classList","contains","remove","add","href","Introduction","introductionTitle","whoHeading","whoContent","whatHeading","whatContent","howHeading","howContent","About","AboutCompany","aboutTitle","aboutContent1","aboutContent2","aboutContent3","Goals","allGoals","edges","slice","map","item","index","key","node","goalHeading","goalDescription","goalImpact","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","exact","path","component","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47e941c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nfunction Home() {\r\n    const { loading, error, data } = useQuery(gql`\r\n        {\r\n            Introduction {\r\n                introductionTitle,\r\n                whoHeading,\r\n                whoContent,\r\n                whatHeading,\r\n                whatContent,\r\n                howHeading,\r\n                howContent\r\n            }\r\n        }\r\n    `);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error</p>;\r\n\r\n    return (\r\n        <div>\r\n            <nav id=\"nav\">\r\n                <button className=\"nav-icon\" id=\"nav-icon\" onClick={function () {\r\n                    document.getElementById('nav').classList.contains('active') ? document.getElementById('nav').classList.remove('active') : document.getElementById('nav').classList.add('active'); }}>\r\n                    <span></span>\r\n                </button>\r\n                <ul>\r\n                    <li><a href={\"/Home\"}>Introduction</a></li>\r\n                    <li><a href={\"/About\"}>About</a></li>\r\n                    <li><a href={\"/Goals\"}>Goals</a></li>\r\n                    <li><a href=\"#contact\">contact</a></li>\r\n                </ul>\r\n            </nav>\r\n            <section id=\"introduction\">\r\n                <h2> {data.Introduction.introductionTitle} </h2>\r\n                <h3> {data.Introduction.whoHeading}</h3>\r\n                <p> {data.Introduction.whoContent} </p>\r\n                <h3> {data.Introduction.whatHeading}</h3>\r\n                <p> {data.Introduction.whatContent} </p>\r\n                <h3> {data.Introduction.howHeading}</h3>\r\n                <p> {data.Introduction.howContent} </p>\r\n            </section>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nfunction About() {\r\n    const { loading, error, data } = useQuery(gql`\r\n        {\r\n            AboutCompany{\r\n                aboutTitle,\r\n                aboutContent1,\r\n                aboutContent2,\r\n                aboutContent3\r\n            }\r\n        }\r\n    `);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error</p>;\r\n\r\n    return (\r\n        <div>\r\n            <nav id=\"nav\">\r\n                <button className=\"nav-icon\" id=\"nav-icon\" onClick={function () {\r\n                    document.getElementById('nav').classList.contains('active') ? document.getElementById('nav').classList.remove('active') : document.getElementById('nav').classList.add('active'); }}>\r\n                    <span></span>\r\n                </button>\r\n                <ul>\r\n                    <li><a href={\"/Home\"}>Introduction</a></li>\r\n                    <li><a href={\"/About\"}>About</a></li>\r\n                    <li><a href={\"/Goals\"}>Goals</a></li>\r\n                    <li><a href=\"#contact\">contact</a></li>\r\n                </ul>\r\n            </nav>\r\n            <section id=\"about\">\r\n                <h2> {data.AboutCompany.aboutTitle} </h2>\r\n                <p> {data.AboutCompany.aboutContent1}</p>\r\n                <p> {data.AboutCompany.aboutContent2}</p>\r\n                <p> {data.AboutCompany.aboutContent3}</p>\r\n            </section>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {gql} from 'apollo-boost';\r\nimport { useQuery } from '@apollo/react-hooks';\r\n\r\nfunction Goals() {\r\n    const { loading, error, data } = useQuery(gql`\r\n        {\r\n\t        allGoals{\r\n\t\t        edges {\r\n\t\t\t        node{\r\n\t\t\t\t        goalHeading,\r\n                        goalDescription,\r\n                        goalImpact\r\n                    }\r\n                }\r\n             }\r\n        }\r\n    `);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error</p>;\r\n\r\n    return (\r\n        <div>\r\n            <nav id=\"nav\">\r\n                <button className=\"nav-icon\" id=\"nav-icon\" onClick={function () {\r\n                    document.getElementById('nav').classList.contains('active') ? document.getElementById('nav').classList.remove('active') : document.getElementById('nav').classList.add('active'); }}>\r\n                    <span></span>\r\n                </button>\r\n                <ul>\r\n                    <li><a href={\"/Home\"}>Introduction</a></li>\r\n                    <li><a href={\"/About\"}>About</a></li>\r\n                    <li><a href={\"/Goals\"}>Goals</a></li>\r\n                    <li><a href=\"#contact\">contact</a></li>\r\n                </ul>\r\n            </nav>\r\n            <div>\r\n                <section>\r\n                    <h2>Goals</h2>\r\n                    <p>My Goals for work term 2 </p>\r\n                </section>\r\n                {\r\n                    data.allGoals.edges.slice(0).map((item, index) => (\r\n                        <section key={index}>\r\n                            <h3>{item.node.goalHeading}</h3>\r\n                            <p>{item.node.goalDescription}</p>\r\n                            <p>{item.node.goalImpact}</p>\r\n                        </section>\r\n                    ))\r\n                }  \r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Goals;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n//import App from './App';\r\nimport Home from './Home';\r\nimport About from './About';\r\nimport Goals from './Goals';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Import for apollo graph ql\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\r\n\r\n// Set up link to cms\r\nconst client = new ApolloClient({\r\n    uri: 'https://prime-cms-linda.herokuapp.com/graphql'\r\n})\r\n\r\nconst App = () => (\r\n    <ApolloProvider client={client}>\r\n        <Router>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/Home\" component={Home} />\r\n            <Route exact path=\"/About\" component={About} />\r\n            <Route exact path=\"/Goals\" component={Goals} />\r\n        </Router>\r\n    </ApolloProvider>\r\n);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}